# nightlight:
#   timer:
#     # kitchen
#     nightlight_kitchen_timer:
#       duration: '00:00:10'
#     # hall
#     nightlight_hall_timer:
#       duration: '00:00:10'
#     # bath
#     nightlight_bath_timer:
#       duration: '00:00:10'

#   input_number:
#     nightlight_color_morning_brightness:
#       max: 255
#       min: 0
#       step: 1
#     nightlight_color_day_brightness:
#       max: 255
#       min: 0
#       step: 1
#     nightlight_color_evening_brightness:
#       max: 255
#       min: 0
#       step: 1
#     nightlight_color_night_brightness:
#       max: 255
#       min: 0
#       step: 1
#     # kitchen
#     nightlight_kitchen_sensor_delay_night:
#       max: 240
#       min: 0
#       step: 1
#     nightlight_kitchen_sensor_delay_day:
#       max: 240
#       min: 0
#       step: 1
#     # hall
#     nightlight_hall_sensor_delay_night:
#       max: 240
#       min: 0
#       step: 1
#     nightlight_hall_sensor_delay_day:
#       max: 240
#       min: 0
#       step: 1
#     nightlight_hall_light_brightness:
#       max: 255
#       min: 1
#       step: 1
#     nightlight_hall_light_temperature:
#       max: 100
#       min: 95
#       step: 1
#     # bath
#     nightlight_bath_sensor_delay_night:
#       max: 240
#       min: 0
#       step: 1
#     nightlight_bath_sensor_delay_day:
#       max: 240
#       min: 0
#       step: 1

#   input_boolean:
#     # kitchen
#     nightlight_kitchen_use_sensors:
#       icon: 'mdi:lightbulb-auto-outline'
#     nightlight_kitchen_use_in_morning:
#       icon: 'mdi:clock-time-nine-outline'
#     nightlight_kitchen_use_in_day:
#       icon: 'mdi:clock-time-twelve-outline'
#     nightlight_kitchen_use_in_evening:
#       icon: 'mdi:clock-time-eleven-outline'
#     nightlight_kitchen_use_in_night:
#       icon: 'mdi:clock-time-one-outline'
#     # hall
#     nightlight_hall_use_sensors:
#       icon: 'mdi:lightbulb-auto-outline'
#     nightlight_hall_use_in_morning:
#       icon: 'mdi:clock-time-nine-outline'
#     nightlight_hall_use_in_day:
#       icon: 'mdi:clock-time-twelve-outline'
#     nightlight_hall_use_in_evening:
#       icon: 'mdi:clock-time-eleven-outline'
#     nightlight_hall_use_in_night:
#       icon: 'mdi:clock-time-one-outline'
#     nightlight_hall_use_smart_brightness:
#       icon: 'mdi:lightbulb-variant-outline'
#     nightlight_hall_use_smart_temperature:
#       icon: 'mdi:lightbulb-variant'
#     # bath
#     nightlight_bath_use_sensors:
#       icon: 'mdi:lightbulb-auto-outline'
#     nightlight_bath_use_in_morning:
#       icon: 'mdi:clock-time-nine-outline'
#     nightlight_bath_use_in_day:
#       icon: 'mdi:clock-time-twelve-outline'
#     nightlight_bath_use_in_evening:
#       icon: 'mdi:clock-time-eleven-outline'
#     nightlight_bath_use_in_night:
#       icon: 'mdi:clock-time-one-outline'
#     # toilet
#     nightlight_toilet_use_sensors:
#       icon: 'mdi:lightbulb-auto-outline'
#     nightlight_toilet_use_in_morning:
#       icon: 'mdi:clock-time-nine-outline'
#     nightlight_toilet_use_in_day:
#       icon: 'mdi:clock-time-twelve-outline'
#     nightlight_toilet_use_in_evening:
#       icon: 'mdi:clock-time-eleven-outline'
#     nightlight_toilet_use_in_night:
#       icon: 'mdi:clock-time-one-outline'

#   template:
#   - sensor: 
#     - name: 'nightlight_brightness'
#       state: >
#         {% set isMorning = is_state('binary_sensor.night_is_morning_time', 'on') %}
#         {% set isDay = is_state('binary_sensor.night_is_day_time', 'on') %}
#         {% set isNEvening = is_state('binary_sensor.night_is_evening_time', 'on') %}
#         {% set isNight = is_state('binary_sensor.night_is_night_time', 'on') %}
#         {% if isMorning %}
#           {{ states('input_number.nightlight_color_morning_brightness') }}
#         {% endif %}
#         {% if isDay %}
#           {{ states('input_number.nightlight_color_day_brightness') }}
#         {% endif %}
#         {% if isNEvening %}
#           {{ states('input_number.nightlight_color_evening_brightness') }}
#         {% endif %}
#         {% if isNight %}
#           {{ states('input_number.nightlight_color_night_brightness') }}
#         {% endif %}
#     - name: 'nightlight_temperature_hs'
#       state: >
#         {% set sensorMinValue = 175 %}
#         {% set sensorMaxValue = 333 %}
#         {% set sensorMaxDelta = sensorMaxValue - sensorMinValue %}
#         {% set sensorValue = states('sensor.toplight_temperature') | int(sensorMinValue) %}
#         {% set sensorValueDelta = sensorValue - sensorMinValue %}
#         {% set sensorValuePercent = (sensorValueDelta / sensorMaxDelta) * 100 %}
#         {% set hsMinValue = 95 %}
#         {% set hsMaxValue = 100 %}
#         {% set hsDelta = hsMaxValue - hsMinValue %}
#         {% set hsDeltaValue = hsDelta / 100 * sensorValuePercent %}
#         {% set hsValue = hsDeltaValue + hsMinValue %}
#         {{ hsValue | round }}

#     # kitchen
#     - name: 'nightlight_kitchen_sensor_delay_day'
#       device_class: duration
#       state: "{{ states('input_number.nightlight_kitchen_sensor_delay_day') | int(0) | timestamp_custom('%H:%M:%S', false) }}"
#     - name: 'nightlight_kitchen_sensor_delay_night'
#       device_class: duration
#       state: "{{ states('input_number.nightlight_kitchen_sensor_delay_night') | int(0) | timestamp_custom('%H:%M:%S', false) }}"
#     - name: 'nightlight_kitchen_sensor_delay'
#       device_class: duration
#       state: >
#         {% set dayValue = states('sensor.nightlight_kitchen_sensor_delay_day') %}
#         {% set nightValue = states('sensor.nightlight_kitchen_sensor_delay_night') %}
#         {% set isNight = is_state('binary_sensor.night_kitchen_is_night', 'on') %}
#         {{ iif(isNight, nightValue, dayValue) }}
#     # hall
#     - name: 'nightlight_hall_sensor_delay_day'
#       device_class: duration
#       state: "{{ states('input_number.nightlight_hall_sensor_delay_day') | int(0) | timestamp_custom('%H:%M:%S', false) }}"
#     - name: 'nightlight_hall_sensor_delay_night'
#       device_class: duration
#       state: "{{ states('input_number.nightlight_hall_sensor_delay_night') | int(0) | timestamp_custom('%H:%M:%S', false) }}"
#     - name: 'nightlight_hall_sensor_delay'
#       device_class: duration
#       state: >
#         {% set dayValue = states('sensor.nightlight_hall_sensor_delay_day') %}
#         {% set nightValue = states('sensor.nightlight_hall_sensor_delay_night') %}
#         {% set isNight = is_state('binary_sensor.night_hall_is_night', 'on') %}
#         {{ iif(isNight, nightValue, dayValue) }}
#     # bath
#     - name: 'nightlight_bath_sensor_delay_day'
#       device_class: duration
#       state: "{{ states('input_number.nightlight_bath_sensor_delay_day') | int(0) | timestamp_custom('%H:%M:%S', false) }}"
#     - name: 'nightlight_bath_sensor_delay_night'
#       device_class: duration
#       state: "{{ states('input_number.nightlight_bath_sensor_delay_night') | int(0) | timestamp_custom('%H:%M:%S', false) }}"
#     - name: 'nightlight_bath_sensor_delay'
#       device_class: duration
#       state: >
#         {% set dayValue = states('sensor.nightlight_bath_sensor_delay_day') %}
#         {% set nightValue = states('sensor.nightlight_bath_sensor_delay_night') %}
#         {% set isNight = is_state('binary_sensor.night_bath_is_night', 'on') %}
#         {{ iif(isNight, nightValue, dayValue) }}

#   - binary_sensor:
#     # kitchen
#     - name: 'nightlight_kitchen_light_is_on'
#       state: "{{ is_state('light.nightlight_kitchen', 'on') }}"
#     - name: 'nightlight_kitchen_switch_is_on'
#       state: "{{ is_state('switch.kitchen_switch_right', 'on') }}"
#     - name: 'nightlight_kitchen_timer_is_on'
#       state: "{{ is_state('timer.nightlight_kitchen_timer', 'active') }}"
#     # hall
#     - name: 'nightlight_hall_light_is_on'
#       state: "{{ is_state('light.nightlight_hall', 'on') }}"
#     - name: 'nightlight_hall_timer_is_on'
#       state: "{{ is_state('timer.nightlight_hall_timer', 'active') }}"
#     - name: 'nightlight_hall_automation_is_partly'
#       state: >
#         {% set autoBrightness = is_state('input_boolean.nightlight_hall_use_smart_brightness', 'off') %}
#         {% set autoTemperature = is_state('input_boolean.nightlight_hall_use_smart_temperature', 'off') %}
#         {{ autoBrightness or autoTemperature }}
#     # bath
#     - name: 'nightlight_bath_light_is_on'
#       state: "{{ is_state('light.nightlight_bath', 'on') }}"
#     - name: 'nightlight_bath_timer_is_on'
#       state: "{{ is_state('timer.nightlight_bath_timer', 'active') }}"
#     # toilet
#     - name: 'nightlight_toilet_light_is_on'
#       state: "{{ is_state('light.nightlight_toilet', 'on') }}"

#   automation:
#   # kitchen
#   - alias: 'nightlight_kitchen_actions'
#     initial_state: true
#     trigger:
#     - platform: state
#       entity_id: 
#       - binary_sensor.nightlight_kitchen_switch_is_on
#       - binary_sensor.nightlight_kitchen_light_is_on
#       - input_boolean.nightlight_kitchen_use_sensors
#       - binary_sensor.occupancy_kitchen_is_occupancy
#       - input_boolean.nightlight_kitchen_use_in_morning
#       - binary_sensor.night_is_morning_time
#       - input_boolean.nightlight_kitchen_use_in_day
#       - binary_sensor.night_is_day_time
#       - input_boolean.nightlight_kitchen_use_in_evening
#       - binary_sensor.night_is_evening_time
#       - input_boolean.nightlight_kitchen_use_in_night
#       - binary_sensor.night_kitchen_is_night
#     action:
#     - choose:
#       # switch on
#       - conditions:
#         - condition: and
#           conditions:
#           - condition: state
#             entity_id: binary_sensor.nightlight_kitchen_switch_is_on
#             state: 'off'
#           - condition: state
#             entity_id: binary_sensor.nightlight_kitchen_light_is_on
#             state: 'off'
#           - condition: state
#             entity_id: input_boolean.nightlight_kitchen_use_sensors
#             state: 'on'
#           - condition: state
#             entity_id: binary_sensor.occupancy_kitchen_is_occupancy
#             state: 'on'
#           - condition: or
#             conditions:
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_kitchen_use_in_morning
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_is_morning_time
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_kitchen_is_night
#                 state: 'off'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_kitchen_use_in_day
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_is_day_time
#                 state: 'on'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_kitchen_use_in_evening
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_is_evening_time
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_kitchen_is_night
#                 state: 'off'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_kitchen_use_in_night
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_kitchen_is_night
#                 state: 'on'
#         sequence:
#         - service: switch.turn_on
#           entity_id: 'switch.kitchen_switch_right'
#       # light on
#       - conditions:
#         - condition: and
#           conditions:
#           - condition: state
#             entity_id: binary_sensor.nightlight_kitchen_switch_is_on
#             state: 'on'
#           - condition: state
#             entity_id: binary_sensor.nightlight_kitchen_light_is_on
#             state: 'off'
#           - condition: state
#             entity_id: input_boolean.nightlight_kitchen_use_sensors
#             state: 'on'
#           - condition: state
#             entity_id: binary_sensor.occupancy_kitchen_is_occupancy
#             state: 'on'
#           - condition: or
#             conditions:
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_kitchen_use_in_morning
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_is_morning_time
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_kitchen_is_night
#                 state: 'off'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_kitchen_use_in_day
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_is_day_time
#                 state: 'on'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_kitchen_use_in_evening
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_is_evening_time
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_kitchen_is_night
#                 state: 'off'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_kitchen_use_in_night
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_kitchen_is_night
#                 state: 'on'
#         sequence:
#         - service: light.turn_on
#           entity_id: 'light.nightlight_kitchen'
#       # timer start
#       - conditions:
#         - condition: and
#           conditions:
#           - condition: state
#             entity_id: input_boolean.nightlight_kitchen_use_sensors
#             state: 'on'
#           - condition: state
#             entity_id: binary_sensor.occupancy_kitchen_is_occupancy
#             state: 'off'
#           - condition: state
#             entity_id: binary_sensor.nightlight_kitchen_light_is_on
#             state: 'on'
#         sequence:
#         - service: timer.start
#           entity_id: 'timer.nightlight_kitchen_timer'
#           data_template:
#             duration: "{{ states('sensor.nightlight_kitchen_sensor_delay') }}"
#       # timer cancel
#       - conditions:
#         - condition: and
#           conditions:
#           - condition: state
#             entity_id: input_boolean.nightlight_kitchen_use_sensors
#             state: 'on'
#           - condition: or
#             conditions:
#             - condition: state
#               entity_id: binary_sensor.occupancy_kitchen_is_occupancy
#               state: 'on'
#             - condition: state
#               entity_id: binary_sensor.nightlight_kitchen_light_is_on
#               state: 'off'
#         sequence:
#         - service: timer.cancel
#           entity_id: 'timer.nightlight_kitchen_timer'

#   - alias: 'nightlight_kitchen_light_off'
#     initial_state: true
#     trigger:
#     - platform: state
#       entity_id: 
#       - input_boolean.nightlight_kitchen_use_sensors
#       - input_boolean.nightlight_kitchen_use_in_morning
#       - binary_sensor.night_is_morning_time
#       - input_boolean.nightlight_kitchen_use_in_day
#       - binary_sensor.night_is_day_time
#       - input_boolean.nightlight_kitchen_use_in_evening
#       - binary_sensor.night_is_evening_time
#       - input_boolean.nightlight_kitchen_use_in_night
#       - binary_sensor.night_kitchen_is_night
#     action:
#     - choose:
#       - conditions:
#         - condition: and
#           conditions:
#           - condition: state
#             entity_id: input_boolean.nightlight_kitchen_use_sensors
#             state: 'on'
#           - condition: state
#             entity_id: binary_sensor.nightlight_kitchen_light_is_on
#             state: 'on'
#           - condition: or
#             conditions:
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_kitchen_use_in_morning
#                 state: 'off'
#               - condition: state
#                 entity_id: binary_sensor.night_is_morning_time
#                 state: 'on'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_kitchen_use_in_day
#                 state: 'off'
#               - condition: state
#                 entity_id: binary_sensor.night_is_day_time
#                 state: 'on'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_kitchen_use_in_evening
#                 state: 'off'
#               - condition: state
#                 entity_id: binary_sensor.night_is_evening_time
#                 state: 'on'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_kitchen_use_in_night
#                 state: 'off'
#               - condition: state
#                 entity_id: binary_sensor.night_kitchen_is_night
#                 state: 'on'
#         sequence:
#         - service: light.turn_off
#           entity_id: 'light.nightlight_kitchen'

#   - alias: 'nightlight_kitchen_light_off_by_timer'
#     initial_state: true
#     trigger:
#     - platform: event
#       event_type: timer.finished
#       event_data:
#         entity_id: timer.nightlight_kitchen_timer
#     action:
#     - service: light.turn_off
#       entity_id: 'light.nightlight_kitchen'

#   # hall
#   - alias: 'nightlight_hall_actions'
#     initial_state: true
#     trigger:
#     - platform: state
#       entity_id: 
#       - binary_sensor.nightlight_hall_light_is_on
#       - input_boolean.nightlight_hall_use_sensors
#       - binary_sensor.occupancy_hall_is_occupancy
#       - input_boolean.nightlight_hall_use_in_morning
#       - binary_sensor.night_is_morning_time
#       - input_boolean.nightlight_hall_use_in_day
#       - binary_sensor.night_is_day_time
#       - input_boolean.nightlight_hall_use_in_evening
#       - binary_sensor.night_is_evening_time
#       - input_boolean.nightlight_hall_use_in_night
#       - binary_sensor.night_hall_is_night
#     action:
#     - choose:
#       # light on
#       - conditions:
#         - condition: and
#           conditions:
#           - condition: state
#             entity_id: binary_sensor.nightlight_hall_light_is_on
#             state: 'off'
#           - condition: state
#             entity_id: input_boolean.nightlight_hall_use_sensors
#             state: 'on'
#           - condition: state
#             entity_id: binary_sensor.occupancy_hall_is_occupancy
#             state: 'on'
#           - condition: or
#             conditions:
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_hall_use_in_morning
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_is_morning_time
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_hall_is_night
#                 state: 'off'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_hall_use_in_day
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_is_day_time
#                 state: 'on'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_hall_use_in_evening
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_is_evening_time
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_hall_is_night
#                 state: 'off'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_hall_use_in_night
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_hall_is_night
#                 state: 'on'
#         sequence:
#         - service: light.turn_on
#           entity_id: 'light.nightlight_hall'
#       # timer start
#       - conditions:
#         - condition: and
#           conditions:
#           - condition: state
#             entity_id: input_boolean.nightlight_hall_use_sensors
#             state: 'on'
#           - condition: state
#             entity_id: binary_sensor.occupancy_hall_is_occupancy
#             state: 'off'
#           - condition: state
#             entity_id: binary_sensor.nightlight_hall_light_is_on
#             state: 'on'
#         sequence:
#         - service: timer.start
#           entity_id: 'timer.nightlight_hall_timer'
#           data_template:
#             duration: "{{ states('sensor.nightlight_hall_sensor_delay') }}"
#       # timer cancel
#       - conditions:
#         - condition: and
#           conditions:
#           - condition: state
#             entity_id: input_boolean.nightlight_hall_use_sensors
#             state: 'on'
#           - condition: or
#             conditions:
#             - condition: state
#               entity_id: binary_sensor.occupancy_hall_is_occupancy
#               state: 'on'
#             - condition: state
#               entity_id: binary_sensor.nightlight_hall_light_is_on
#               state: 'off'
#         sequence:
#         - service: timer.cancel
#           entity_id: 'timer.nightlight_hall_timer'

#   - alias: 'nightlight_hall_light_off'
#     initial_state: true
#     trigger:
#     - platform: state
#       entity_id: 
#       - input_boolean.nightlight_hall_use_sensors
#       - input_boolean.nightlight_hall_use_in_morning
#       - binary_sensor.night_is_morning_time
#       - input_boolean.nightlight_hall_use_in_day
#       - binary_sensor.night_is_day_time
#       - input_boolean.nightlight_hall_use_in_evening
#       - binary_sensor.night_is_evening_time
#       - input_boolean.nightlight_hall_use_in_night
#       - binary_sensor.night_hall_is_night
#     action:
#     - choose:
#       - conditions:
#         - condition: and
#           conditions:
#           - condition: state
#             entity_id: input_boolean.nightlight_hall_use_sensors
#             state: 'on'
#           - condition: state
#             entity_id: binary_sensor.nightlight_hall_light_is_on
#             state: 'on'
#           - condition: or
#             conditions:
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_hall_use_in_morning
#                 state: 'off'
#               - condition: state
#                 entity_id: binary_sensor.night_is_morning_time
#                 state: 'on'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_hall_use_in_day
#                 state: 'off'
#               - condition: state
#                 entity_id: binary_sensor.night_is_day_time
#                 state: 'on'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_hall_use_in_evening
#                 state: 'off'
#               - condition: state
#                 entity_id: binary_sensor.night_is_evening_time
#                 state: 'on'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_hall_use_in_night
#                 state: 'off'
#               - condition: state
#                 entity_id: binary_sensor.night_hall_is_night
#                 state: 'on'
#         sequence:
#         - service: light.turn_off
#           entity_id: 'light.nightlight_hall'

#   - alias: 'nightlight_hall_light_off_by_timer'
#     initial_state: true
#     trigger:
#     - platform: event
#       event_type: timer.finished
#       event_data:
#         entity_id: timer.nightlight_hall_timer
#     action:
#     - service: light.turn_off
#       entity_id: 'light.nightlight_hall'

#   - alias: 'nightlight_params'
#     initial_state: true
#     trigger:
#     - platform: state
#       entity_id: 
#       - binary_sensor.nightlight_hall_light_is_on
#       - input_boolean.nightlight_hall_use_smart_brightness
#       - input_boolean.nightlight_hall_use_smart_temperature
#       - input_number.nightlight_hall_light_brightness
#       - input_number.nightlight_hall_light_temperature
#     action:
#     - choose:
#       - conditions:
#         - condition: and
#           conditions:
#           - condition: state
#             entity_id: binary_sensor.nightlight_hall_light_is_on
#             state: 'on'
#         sequence:
#         - service: light.turn_on
#           entity_id: light.nightlight_hall
#           data_template:
#             hs_color: [20, "{{ states('input_number.nightlight_hall_light_temperature') }}"]
#             brightness: "{{ states('input_number.nightlight_hall_light_brightness') }}"

#   # bath
#   - alias: 'nightlight_bath_actions'
#     initial_state: true
#     trigger:
#     - platform: state
#       entity_id: 
#       - binary_sensor.nightlight_bath_light_is_on
#       - input_boolean.nightlight_bath_use_sensors
#       - binary_sensor.occupancy_bath_is_occupancy
#       - input_boolean.nightlight_bath_use_in_morning
#       - binary_sensor.night_is_morning_time
#       - input_boolean.nightlight_bath_use_in_day
#       - binary_sensor.night_is_day_time
#       - input_boolean.nightlight_bath_use_in_evening
#       - binary_sensor.night_is_evening_time
#       - input_boolean.nightlight_bath_use_in_night
#       - binary_sensor.night_bath_is_night
#     action:
#     - choose:
#       # light on
#       - conditions:
#         - condition: and
#           conditions:
#           - condition: state
#             entity_id: binary_sensor.nightlight_bath_light_is_on
#             state: 'off'
#           - condition: state
#             entity_id: input_boolean.nightlight_bath_use_sensors
#             state: 'on'
#           - condition: state
#             entity_id: binary_sensor.occupancy_bath_is_occupancy
#             state: 'on'
#           - condition: or
#             conditions:
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_bath_use_in_morning
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_is_morning_time
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_bath_is_night
#                 state: 'off'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_bath_use_in_day
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_is_day_time
#                 state: 'on'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_bath_use_in_evening
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_is_evening_time
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_bath_is_night
#                 state: 'off'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_bath_use_in_night
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_bath_is_night
#                 state: 'on'
#         sequence:
#         - service: light.turn_on
#           entity_id: 'light.nightlight_bath'
#       # timer start
#       - conditions:
#         - condition: and
#           conditions:
#           - condition: state
#             entity_id: input_boolean.nightlight_bath_use_sensors
#             state: 'on'
#           - condition: state
#             entity_id: binary_sensor.occupancy_bath_is_occupancy
#             state: 'off'
#           - condition: state
#             entity_id: binary_sensor.nightlight_bath_light_is_on
#             state: 'on'
#         sequence:
#         - service: timer.start
#           entity_id: 'timer.nightlight_bath_timer'
#           data_template:
#             duration: "{{ states('sensor.nightlight_bath_sensor_delay') }}"
#       # timer cancel
#       - conditions:
#         - condition: and
#           conditions:
#           - condition: state
#             entity_id: input_boolean.nightlight_bath_use_sensors
#             state: 'on'
#           - condition: or
#             conditions:
#             - condition: state
#               entity_id: binary_sensor.occupancy_bath_is_occupancy
#               state: 'on'
#             - condition: state
#               entity_id: binary_sensor.nightlight_bath_light_is_on
#               state: 'off'
#         sequence:
#         - service: timer.cancel
#           entity_id: 'timer.nightlight_bath_timer'

#   - alias: 'nightlight_bath_light_off'
#     initial_state: true
#     trigger:
#     - platform: state
#       entity_id: 
#       - input_boolean.nightlight_bath_use_sensors
#       - input_boolean.nightlight_bath_use_in_morning
#       - binary_sensor.night_is_morning_time
#       - input_boolean.nightlight_bath_use_in_day
#       - binary_sensor.night_is_day_time
#       - input_boolean.nightlight_bath_use_in_evening
#       - binary_sensor.night_is_evening_time
#       - input_boolean.nightlight_bath_use_in_night
#       - binary_sensor.night_bath_is_night
#     action:
#     - choose:
#       - conditions:
#         - condition: and
#           conditions:
#           - condition: state
#             entity_id: input_boolean.nightlight_bath_use_sensors
#             state: 'on'
#           - condition: state
#             entity_id: binary_sensor.nightlight_bath_light_is_on
#             state: 'on'
#           - condition: or
#             conditions:
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_bath_use_in_morning
#                 state: 'off'
#               - condition: state
#                 entity_id: binary_sensor.night_is_morning_time
#                 state: 'on'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_bath_use_in_day
#                 state: 'off'
#               - condition: state
#                 entity_id: binary_sensor.night_is_day_time
#                 state: 'on'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_bath_use_in_evening
#                 state: 'off'
#               - condition: state
#                 entity_id: binary_sensor.night_is_evening_time
#                 state: 'on'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_bath_use_in_night
#                 state: 'off'
#               - condition: state
#                 entity_id: binary_sensor.night_bath_is_night
#                 state: 'on'
#         sequence:
#         - service: light.turn_off
#           entity_id: 'light.nightlight_bath'

#   - alias: 'nightlight_bath_light_off_by_timer'
#     initial_state: true
#     trigger:
#     - platform: event
#       event_type: timer.finished
#       event_data:
#         entity_id: timer.nightlight_bath_timer
#     action:
#     - service: light.turn_off
#       entity_id: 'light.nightlight_bath'

#   # toilet
#   - alias: 'nightlight_toilet_actions'
#     initial_state: true
#     trigger:
#     - platform: state
#       entity_id: 
#       - binary_sensor.nightlight_btoiletlight_is_on
#       - input_boolean.nightlight_btoiletuse_sensors
#       - binary_sensor.occupancy_toilet_is_occupancy
#       - input_boolean.nightlight_toilet_use_in_morning
#       - binary_sensor.night_is_morning_time
#       - input_boolean.nightlight_toilet_use_in_day
#       - binary_sensor.night_is_day_time
#       - input_boolean.nightlight_toilet_use_in_evening
#       - binary_sensor.night_is_evening_time
#       - input_boolean.nightlight_toilet_use_in_night
#       - binary_sensor.night_toilet_is_night
#     action:
#     - choose:
#       # turn_off light
#       - conditions:
#         - condition: and
#           conditions:
#           - condition: state
#             entity_id: input_boolean.nightlight_toilet_use_sensors
#             state: 'on'
#           - condition: state
#             entity_id: binary_sensor.nightlight_toilet_light_is_on
#             state: 'on'
#           - condition: or
#             conditions:
#             - condition: state
#               entity_id: binary_sensor.occupancy_toilet_is_occupancy
#               state: 'off'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_toilet_use_in_morning
#                 state: 'off'
#               - condition: state
#                 entity_id: binary_sensor.night_is_morning_time
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_toilet_is_night
#                 state: 'off'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_toilet_use_in_day
#                 state: 'off'
#               - condition: state
#                 entity_id: binary_sensor.night_is_day_time
#                 state: 'on'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_toilet_use_in_evening
#                 state: 'off'
#               - condition: state
#                 entity_id: binary_sensor.night_is_evening_time
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_toilet_is_night
#                 state: 'off'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_toilet_use_in_night
#                 state: 'off'
#               - condition: state
#                 entity_id: binary_sensor.night_toilet_is_night
#                 state: 'on'
#         sequence:
#         - service: light.turn_off
#           entity_id: 'light.nightlight_toilet'
#       # turn_on light
#       - conditions:
#         - condition: and
#           conditions:
#           - condition: state
#             entity_id: binary_sensor.nightlight_toilet_light_is_on
#             state: 'off'
#           - condition: state
#             entity_id: input_boolean.nightlight_toilet_use_sensors
#             state: 'on'
#           - condition: state
#             entity_id: binary_sensor.occupancy_toilet_is_occupancy
#             state: 'on'
#           - condition: or
#             conditions:
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_toilet_use_in_morning
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_is_morning_time
#                 state: 'on'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_toilet_use_in_day
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_is_day_time
#                 state: 'on'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_toilet_use_in_evening
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_is_evening_time
#                 state: 'on'
#             - condition: and
#               conditions:
#               - condition: state
#                 entity_id: input_boolean.nightlight_toilet_use_in_night
#                 state: 'on'
#               - condition: state
#                 entity_id: binary_sensor.night_toilet_is_night
#                 state: 'on'
#         sequence:
#         - service: light.turn_on
#           entity_id: 'light.nightlight_toilet'

#   # brightness
#   - alias: 'nightlight_brightness_actions'
#     initial_state: true
#     trigger:
#     - platform: state
#       entity_id: 
#       - sensor.nightlight_brightness
#       - binary_sensor.nightlight_hall_light_is_on
#       - input_boolean.nightlight_hall_use_smart_brightness
#     action:
#     - choose:
#       # hall light
#       - conditions:
#         - condition: and
#           conditions:
#           - condition: state
#             entity_id: binary_sensor.nightlight_hall_light_is_on
#             state: 'on'
#           - condition: state
#             entity_id: input_boolean.nightlight_hall_use_smart_brightness
#             state: 'on'
#         sequence:
#         - service: input_number.set_value
#           data_template:
#             entity_id: 'input_number.nightlight_hall_light_brightness'
#             value: "{{ states('sensor.nightlight_brightness') }}"

#   # temperature
#   - alias: 'nightlight_brightness_actions'
#     initial_state: true
#     trigger:
#     - platform: state
#       entity_id: 
#       - sensor.nightlight_temperature
#       - binary_sensor.nightlight_hall_light_is_on
#       - input_boolean.nightlight_hall_use_smart_temperature
#     action:
#     - choose:
#       # hall light
#       - conditions:
#         - condition: and
#           conditions:
#           - condition: state
#             entity_id: binary_sensor.nightlight_hall_light_is_on
#             state: 'on'
#           - condition: state
#             entity_id: input_boolean.nightlight_hall_use_smart_temperature
#             state: 'on'
#         sequence:
#         - service: input_number.set_value
#           data_template:
#             entity_id: 'input_number.nightlight_hall_light_temperature'
#             value: "{{ states('sensor.nightlight_temperature_hs') }}"