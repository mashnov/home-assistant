- sensor:
  - name: 'temperature'
    device_class: 'temperature'
    unit_of_measurement: 'Â°C'
    state: >
      {% set kitchen = state_attr('sensor.temperature', 'kitchen') | float(0) %}
      {% set hall = state_attr('sensor.temperature', 'hall') | float(0) %}
      {% set bedroom = state_attr('sensor.temperature', 'bedroom') | float(0) %}
      {% set living = state_attr('sensor.temperature', 'living') | float(0) %}
      {{ ((kitchen + hall + bedroom + living) / 4) | round(1) }}
    icon: >
      {% set isNormal = state_attr('sensor.temperature', 'normal') %}
      {% set isLow = state_attr('sensor.temperature', 'low') %}
      {% set lowIcon = 'mdi:thermometer-chevron-down' %}
      {% set normalIcon = 'mdi:thermometer-check' %}
      {% set hightIcon = 'mdi:thermometer-chevron-up' %}
      {{ iif(isNormal, normalIcon, iif(isLow, lowIcon, hightIcon)) }}
    attributes:
      normal: >
        {% set isHight = state_attr('sensor.temperature', 'hight') %}
        {% set isLow = state_attr('sensor.temperature', 'low') %}
        {{ not(isLow) and not(isHight) }}
      hight: >
        {% set sensorValue = states('sensor.temperature') | int(0) %}
        {% set normalValue = states('input_number.t_target') | int(0) %}
        {% set offsetValue = states('input_number.t_offset') | int(0) %}
        {% set targetValue = normalValue + offsetValue %}
        {{ sensorValue > targetValue }}
      low: >
        {% set sensorValue = states('sensor.temperature') | int(0) %}
        {% set normalValue = states('input_number.t_target') | int(0) %}
        {% set offsetValue = states('input_number.t_offset') | int(0) %}
        {% set targetValue = normalValue - offsetValue %}
        {{ sensorValue < targetValue }}
      kitchen: "{{ states('sensor.kitchen_temperature') }}"
      bath: "{{ states('sensor.bath_temperature') }}"
      hall: "{{ states('sensor.hall_temperature') }}"
      bedroom: "{{ states('sensor.bedroom_temperature') }}"
      living: "{{ states('sensor.living_temperature') }}"
      balcony: "{{ states('sensor.balcony_temperature') }}"

  - name: 'humidity'
    device_class: 'humidity'
    unit_of_measurement: '%'
    state: >
      {% set kitchen = state_attr('sensor.humidity', 'kitchen') | float(0) %}
      {% set hall = state_attr('sensor.humidity', 'hall') | float(0) %}
      {% set bedroom = state_attr('sensor.humidity', 'bedroom') | float(0) %}
      {% set living = state_attr('sensor.humidity', 'living') | float(0) %}
      {{ ((kitchen + hall + bedroom + living) / 4) | round(1) }}
    icon: >
      {% set isNormal = state_attr('sensor.humidity', 'normal') %}
      {% set isLow = state_attr('sensor.humidity', 'low') %}
      {% set lowIcon = 'mdi:water-outline' %}
      {% set normalIcon = 'mdi:water-opacity' %}
      {% set hightIcon = 'mdi:water' %}
      {{ iif(isNormal, normalIcon, iif(isLow, lowIcon, hightIcon)) }}
    attributes:
      normal: >
        {% set isHight = state_attr('sensor.humidity', 'hight') %}
        {% set isLow = state_attr('sensor.humidity', 'low') %}
        {{ not(isLow) and not(isHight) }}
      hight: >
        {% set sensorValue = states('sensor.humidity') | int(0) %}
        {% set normalValue = states('input_number.h_target') | int(0) %}
        {% set offsetValue = states('input_number.h_offset') | int(0) %}
        {% set targetValue = normalValue + offsetValue %}
        {{ sensorValue > targetValue }}
      low: >
        {% set sensorValue = states('sensor.humidity') | int(0) %}
        {% set normalValue = states('input_number.h_target') | int(0) %}
        {% set offsetValue = states('input_number.h_offset') | int(0) %}
        {% set targetValue = normalValue - offsetValue %}
        {{ sensorValue < targetValue }}
      kitchen: "{{ states('sensor.kitchen_humidity') }}"
      bath: "{{ states('sensor.bath_humidity') }}"
      hall: "{{ states('sensor.hall_humidity') }}"
      bedroom: "{{ states('sensor.bedroom_humidity') }}"
      living: "{{ states('sensor.living_humidity') }}"
      balcony: "{{ states('sensor.balcony_humidity') }}"

  - name: 'pressure'
    device_class: 'pressure'
    unit_of_measurement: 'mmHg'
    state: >
      {% set kitchen = state_attr('sensor.pressure', 'kitchen') | float(0) %}
      {% set bath = state_attr('sensor.pressure', 'bath') | float(0) %}
      {% set hall = state_attr('sensor.pressure', 'hall') | float(0) %}
      {% set bedroom = state_attr('sensor.pressure', 'bedroom') | float(0) %}
      {% set living = state_attr('sensor.pressure', 'living') | float(0) %}
      {{ ((kitchen + bath + hall + bedroom + living) / 5) | round(1) }}
    icon: >
      {% set isNormal = state_attr('sensor.pressure', 'normal') %}
      {% set isLow = state_attr('sensor.pressure', 'low') %}
      {% set lowIcon = 'mdi:gauge-empty' %}
      {% set normalIcon = 'mdi:gauge-low' %}
      {% set hightIcon = 'mdi:gauge-full' %}
      {{ iif(isNormal, normalIcon, iif(isLow, lowIcon, hightIcon)) }}
    attributes:
      normal: >
        {% set isHight = state_attr('sensor.pressure', 'hight') %}
        {% set isLow = state_attr('sensor.pressure', 'low') %}
        {{ not(isLow) and not(isHight) }}
      hight: >
        {% set sensorValue = states('sensor.pressure') | int(0) %}
        {% set normalValue = states('input_number.p_target') | int(0) %}
        {% set offsetValue = states('input_number.p_offset') | int(0) %}
        {% set targetValue = normalValue + offsetValue %}
        {{ sensorValue > targetValue }}
      low: >
        {% set sensorValue = states('sensor.pressure') | int(0) %}
        {% set normalValue = states('input_number.p_target') | int(0) %}
        {% set offsetValue = states('input_number.p_offset') | int(0) %}
        {% set targetValue = normalValue - offsetValue %}
        {{ sensorValue < targetValue }}
      kitchen: "{{ states('sensor.kitchen_pressure') }}"
      bath: "{{ states('sensor.bath_pressure') }}"
      hall: "{{ states('sensor.hall_pressure') }}"
      bedroom: "{{ states('sensor.bedroom_pressure') }}"
      living: "{{ states('sensor.living_pressure') }}"

  - name: 'solar'
    device_class: 'illuminance'
    unit_of_measurement: 'lx'
    state: '{{ state_attr("sensor.solar", "illuminance") }}'
    icon: >
      {% set isHight = state_attr('sensor.solar', 'hight') %}
      {% set hightIcon = 'mdi:sun-wireless' %}
      {% set lowIcon = 'mdi:weather-sunny' %}
      {{ iif(isHight, hightIcon, lowIcon) }}
    attributes:
      illuminance: '{{ state_attr("sensor.balcony_illuminance", "illuminance_lux") | int(0) | round(1) }}'
      azimuth: '{{ state_attr("sun.sun", "azimuth") }}'
      elevation: '{{ state_attr("sun.sun", "elevation") }}'
      hight: >
        {% set azimuthSensor = state_attr('solar', 'azimuth') | int(0) %}
        {% set azimuthTarget = states('input_number.s_azimuth_target') | int(0) %}
        {% set azimuthOffset = states('input_number.s_azimuth_offset') | int(0) %}
        {% set azimuthMinValue = azimuthTarget - azimuthOffset %}
        {% set azimuthMaxValue = azimuthTarget + azimuthOffset %}
        {% set azimuthValue = azimuthMinValue < azimuthSensor < azimuthMaxValue %}
        {% set elevationSensor = state_attr('solar', 'elevation') | int(0) %}
        {% set elevationTarget = states('input_number.s_elevation_target') | int(0) %}
        {% set elevationOffset = states('input_number.s_elevation_offset') | int(0) %}        
        {% set elevationMinValue = elevationTarget - elevationOffset %}
        {% set elevationMaxValue = elevationTarget + elevationOffset %}
        {% set elevationValue = elevationMinValue < elevationSensor < elevationMaxValue %}
        {{ azimuthValue and elevationValue }}

- binary_sensor:
  - name: 'cloud'
    state: >
      {% set sensorValue = state_attr('sensor.cloud', 'level') | int(0) %}
      {% set targetValue = states('input_number.cl_target') | int(0) %}
      {{ sensorValue > targetValue }}
    icon: >
      {% set isHight = is_state('binary_sensor.cloud', 'on') %}
      {% set hightIcon = 'mdi:apple-icloud' %}
      {% set lowIcon = 'mdi:cloud-outline' %}
      {{ iif(isHight, hightIcon, lowIcon) }}
    attributes:
      level: '{{ states("sensor.openweathermap_cloud_coverage") }}'