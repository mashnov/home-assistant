## PRESSURE
- sensor:
  - name: 'p_level'
    device_class: 'pressure'
    unit_of_measurement: 'mmHg'
    state: >
      {% set kitchen = states('sensor.p_kitchen_level') | float(0) %}
      {% set bath = states('sensor.p_bath_level') | float(0) %}
      {% set hall = states('sensor.p_hall_level') | float(0) %}
      {% set bedroom = states('sensor.p_bedroom_level') | float(0) %}
      {% set living = states('sensor.p_living_level') | float(0) %}
      {{ ((kitchen + bath + hall + bedroom + living) / 5) | round(1) }}

  - name: 'p_kitchen_level'
    device_class: 'pressure'
    unit_of_measurement: 'mmHg'
    state: "{{ states('sensor.kitchen_pressure') | float(0) | round(1) }}"

  - name: 'p_bath_level'
    device_class: 'pressure'
    unit_of_measurement: 'mmHg'
    state: "{{ states('sensor.bath_pressure') | float(0) | round(1) }}"

  - name: 'p_hall_level'
    device_class: 'pressure'
    unit_of_measurement: 'mmHg'
    state: "{{ states('sensor.hall_pressure') | float(0) | round(1) }}"

  - name: 'p_bedroom_level'
    device_class: 'pressure'
    unit_of_measurement: 'mmHg'
    state: "{{ states('sensor.bedroom_pressure') | float(0) | round(1) }}"

  - name: 'p_living_level'
    device_class: 'pressure'
    unit_of_measurement: 'mmHg'
    state: "{{ states('sensor.living_pressure') | float(0) | round(1) }}"

- binary_sensor:
  - name: 'p_hight_state'
    state: >
      {% set sensorValue = states('sensor.p_level') | int(0) %}
      {% set normalValue = states('input_number.p_target') | int(0) %}
      {% set offsetValue = states('input_number.p_offset') | int(0) %}
      {% set targetValue = normalValue + offsetValue %}
      {{ sensorValue > targetValue }}

  - name: 'p_low_state'
    state: >
      {% set sensorValue = states('sensor.p_level') | int(0) %}
      {% set normalValue = states('input_number.p_target') | int(0) %}
      {% set offsetValue = states('input_number.p_offset') | int(0) %}
      {% set targetValue = normalValue - offsetValue %}
      {{ sensorValue < targetValue }}

  - name: 't_hight_boolean'
    state: "{{ is_state('input_boolean.p_hight_state', 'on') }}"

  - name: 't_hight_boolean'
    state: "{{ is_state('input_boolean.p_low_state', 'on') }}"









